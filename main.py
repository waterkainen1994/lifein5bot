import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.client.default import DefaultBotProperties
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from dotenv import load_dotenv
import os
from gpt import generate_prediction

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏
user_prompts = {}  # –•—Ä–∞–Ω–∏—Ç –∞–Ω–∫–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_predictions = {}  # –•—Ä–∞–Ω–∏—Ç –ø—Ä–æ–≥–Ω–æ–∑—ã

@dp.message(CommandStart())
async def start(message: types.Message):
    chat_id = message.chat.id
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    await message.answer(
        "üôã <b>–≠–¢–û –ñ–î–Å–¢ –¢–ï–ë–Ø –ß–ï–†–ï–ó 5 –õ–ï–¢</b> ü•≤\n\n"
        "–í—Å–µ–≥–æ 3 –≤–æ–ø—Ä–æ—Å–∞ –∏ –ò–ò –ø–æ—Å—Ç—Ä–æ–∏—Ç –ø—Ä–æ–≥–Ω–æ–∑ —Ç–≤–æ–µ–π –∂–∏–∑–Ω–∏ –Ω–∞ 5 –ª–µ—Ç –≤–ø–µ—Ä—ë–¥ üëè\n"
        "–ù–∞–∂–º–∏ '–ó–∞–ø—É—Å—Ç–∏—Ç—å', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!"
    )
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–∫–æ–ø–∏—Ä—É–π —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–∞–ø–æ–ª–Ω–∏ –ø–æ–ª—è –ø—Ä–æ —Å–µ–±—è —á–µ—Å—Ç–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –µ–≥–æ –æ–±—Ä–∞—Ç–Ω–æ:\n\n"
        "<i>–ú–æ–π –≤–æ–∑—Ä–∞—Å—Ç:</i>\n"
        "<i>–°—Ç—Ä–∞–Ω–∞, –≥–¥–µ —è –∂–∏–≤—É:</i>\n"
        "<i>–°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ:</i>\n"
        "<i>–ú–æ–∏ 3-5 –≥–ª–∞–≤–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤:</i>\n"
        "<i>–ö–∞–∫ —è –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—é –Ω–∞ –∂–∏–∑–Ω—å:</i>\n"
        "<i>–ö–∞–∫ —è –∑–∞–±–æ—á—É—Å—å –æ —Å–≤–æ—ë–º –∑–¥–æ—Ä–æ–≤—å–µ:</i>\n"
        "<i>–ú–æ—è —Ä—É—Ç–∏–Ω–∞ –≤ –∂–∏–∑–Ω–∏:</i>\n"
        "<i>–ú–æ—è —Å–∞–º–∞—è –±–æ–ª—å—à–∞—è –º–µ—á—Ç–∞:</i>\n\n"
        "<b>–ù–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–π –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–æ–µ–π –∂–∏–∑–Ω–∏ —á–µ—Ä–µ–∑ 5 –ª–µ—Ç.</b>"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–Ω–∫–µ—Ç—ã
@dp.message(lambda message: not message.text.startswith('/'))
async def handle_filled_form(message: types.Message):
    chat_id = message.chat.id
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∞–Ω–∫–µ—Ç—ã
    if "–ú–æ–π –≤–æ–∑—Ä–∞—Å—Ç" in message.text and "–°—Ç—Ä–∞–Ω–∞, –≥–¥–µ —è –∂–∏–≤—É" in message.text:
        logging.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∞–Ω–∫–µ—Ç–∞ –æ—Ç chat_id {chat_id}")
        user_prompts[chat_id] = message.text
        await message.answer("üß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–≤–æ—é –∂–∏–∑–Ω—å...")
        try:
            result = await generate_prediction(message.text)
            user_predictions[chat_id] = result
            await message.answer(f"<b>üîÆ –ü—Ä–æ–≥–Ω–æ–∑:</b>\n{result}")
            logging.info(f"–ü—Ä–æ–≥–Ω–æ–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è chat_id {chat_id}")

            # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫—É "–£–∑–Ω–∞—Ç—å –ø—Ä–æ —Å—Ü–µ–Ω–∞—Ä–∏–∏"
            markup = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–£–∑–Ω–∞—Ç—å –ø—Ä–æ —Å—Ü–µ–Ω–∞—Ä–∏–∏", callback_data="learn_scenarios")]
            ])
            await message.answer("–•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å, —á—Ç–æ –±—É–¥–µ—Ç, –µ—Å–ª–∏ —Ç—ã –Ω–µ –∏–∑–º–µ–Ω–∏—à—å —Å—Ü–µ–Ω–∞—Ä–∏–π?", reply_markup=markup)
        except Exception as e:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è chat_id {chat_id}: {e}")
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π –ø–æ–∫—É–ø–∫–∏
    elif message.text == "—Å–µ–∫—Ä–µ—Ç–Ω–∞—è–ø–æ–∫—É–ø–∫–∞123":  # –°–µ–∫—Ä–µ—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç
        chat_id = message.chat.id
        logging.info(f"–°–µ–∫—Ä–µ—Ç–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ –¥–ª—è chat_id {chat_id}")
        user_input = user_prompts.get(chat_id)
        previous_result = user_predictions.get(chat_id)
        if not user_input:
            await message.answer(
                "–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏ –∞–Ω–∫–µ—Ç—É! üòä\n"
                "–û—Ç–ø—Ä–∞–≤—å /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É."
            )
            logging.warning(f"–ê–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è chat_id: {chat_id}")
            return
        await message.answer("üí´ –ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞! –ì–µ–Ω–µ—Ä–∏—Ä—É—é...")
        try:
            future = await generate_prediction(user_input, future_mode=True, previous_response=previous_result)
            await message.answer(future)
            await message.answer("–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —É–ª—É—á—à–µ–Ω–∏–µ–º –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞, –∂–¥–∏—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π! üöÄ")
            logging.info(f"3 —Å–æ–±—ã—Ç–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –¥–ª—è chat_id {chat_id}")
        except Exception as e:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è chat_id {chat_id}: {e}")
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏ –∞–Ω–∫–µ—Ç—É, —Å–∫–æ–ø–∏—Ä–æ–≤–∞–≤ –∏ –∑–∞–ø–æ–ª–Ω–∏–≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω.")
        logging.warning(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç chat_id {chat_id} –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –∫–∞–∫ –∞–Ω–∫–µ—Ç–∞")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–£–∑–Ω–∞—Ç—å –ø—Ä–æ —Å—Ü–µ–Ω–∞—Ä–∏–∏"
@dp.callback_query(lambda c: c.data == "learn_scenarios")
async def process_learn_scenarios(callback_query: types.CallbackQuery):
    chat_id = callback_query.from_user.id
    await callback_query.message.answer(
        "–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, —á—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç, –µ—Å–ª–∏ —Ç—ã –Ω–µ –∏–∑–º–µ–Ω–∏—à—å —Å—Ü–µ–Ω–∞—Ä–∏–π, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–ª–∞—Ç–∏—Ç—å 1 –∑–≤—ë–∑–¥—É."
    )
    await bot.send_invoice(
        chat_id=chat_id,
        title="3 —Å–æ–±—ã—Ç–∏—è –≤ –±—É–¥—É—â–µ–º",
        description="–£–∑–Ω–∞–π, —á—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç, –µ—Å–ª–∏ –Ω–µ –∏–∑–º–µ–Ω–∏—à—å —Å—Ü–µ–Ω–∞—Ä–∏–π.",
        payload="buy_3_events",
        provider_token="",
        currency="XTR",
        prices=[types.LabeledPrice(label="–ü—Ä–æ–≥–Ω–æ–∑", amount=1)],
    )
    await callback_query.answer()

@dp.pre_checkout_query()
async def process_pre_checkout_query(pre_checkout_query: types.PreCheckoutQuery):
    logging.info(f"–ü–æ–ª—É—á–µ–Ω pre_checkout_query: {pre_checkout_query.id}")
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)

@dp.message(lambda message: message.successful_payment)
async def process_successful_payment(message: types.Message):
    chat_id = message.chat.id
    payload = message.successful_payment.invoice_payload
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞: {payload}")
    
    if payload == "buy_3_events":
        user_input = user_prompts.get(chat_id)
        previous_result = user_predictions.get(chat_id)
        if not user_input:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏ –∞–Ω–∫–µ—Ç—É!")
            logging.warning(f"–ê–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è chat_id: {chat_id}")
            return
        await message.answer("üí´ –ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞! –ì–µ–Ω–µ—Ä–∏—Ä—É—é...")
        try:
            future = await generate_prediction(user_input, future_mode=True, previous_response=previous_result)
            await message.answer(future)
            await message.answer("–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —É–ª—É—á—à–µ–Ω–∏–µ–º –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞, –∂–¥–∏—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π! üöÄ")
            logging.info(f"3 —Å–æ–±—ã—Ç–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –¥–ª—è chat_id {chat_id}")
        except Exception as e:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è chat_id {chat_id}: {e}")

@dp.message()
async def debug_unhandled(message: types.Message):
    logging.info(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text} –æ—Ç chat_id {message.chat.id}")

async def main():
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
