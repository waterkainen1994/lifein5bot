import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.client.default import DefaultBotProperties
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from dotenv import load_dotenv
import os
from gpt import generate_prediction

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏
user_prompts = {}  # –•—Ä–∞–Ω–∏—Ç –∞–Ω–∫–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_predictions = {}  # –•—Ä–∞–Ω–∏—Ç –ø—Ä–æ–≥–Ω–æ–∑—ã
processed_callbacks = set()  # –•—Ä–∞–Ω–∏—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ callback_query_id

@dp.message(CommandStart())
async def start(message: types.Message):
    chat_id = message.chat.id
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    await message.answer(
        "üåü <b>–£–ó–ù–ê–ô, –ß–¢–û –ñ–î–Å–¢ –¢–ï–ë–Ø –ß–ï–†–ï–ó 5 –õ–ï–¢!</b> üåü\n\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –∑–∞–≥–ª—è–Ω—É—Ç—å –≤ –±—É–¥—É—â–µ–µ —Å –ø–æ–º–æ—â—å—é –ò–ò! –û—Ç–≤–µ—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ —Å–µ–±–µ, –∏ —è —Å–æ–∑–¥–∞–º –ø–æ–¥—Ä–æ–±–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ —Ç–≤–æ–µ–π –∂–∏–∑–Ω–∏ –Ω–∞ 5 –ª–µ—Ç –≤–ø–µ—Ä—ë–¥. –ê –ø–æ—Å–ª–µ —Ç—ã —Å–º–æ–∂–µ—à—å —É–∑–Ω–∞—Ç—å, —á—Ç–æ –±—É–¥–µ—Ç, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –∏–∑–º–µ–Ω–∏—Ç—å, –≤—Å–µ–≥–æ –∑–∞ 1 –∑–≤–µ–∑–¥—É ‚≠ê! –≠—Ç–æ –∑–∞–π–º—ë—Ç –≤—Å–µ–≥–æ –ø–∞—Ä—É –º–∏–Ω—É—Ç! üòä\n\n"
        "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –ø—Ä–æ—Å—Ç–æ –∑–∞–ø–æ–ª–Ω–∏ –∞–Ω–∫–µ—Ç—É –Ω–∏–∂–µ üëá"
    )
    await message.answer(
        "üìù <b>–î–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è –ø–æ–±–ª–∏–∂–µ!</b>\n\n"
        "–ß—Ç–æ–±—ã —è –º–æ–≥ —Å–¥–µ–ª–∞—Ç—å —Ç–æ—á–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ —Ç–≤–æ–µ–π –∂–∏–∑–Ω–∏ —á–µ—Ä–µ–∑ 5 –ª–µ—Ç, –º–Ω–µ –Ω—É–∂–Ω–æ —É–∑–Ω–∞—Ç—å –æ —Ç–µ–±–µ –Ω–µ–º–Ω–æ–≥–æ –±–æ–ª—å—à–µ. –°–∫–æ–ø–∏—Ä—É–π —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–∞–ø–æ–ª–Ω–∏ –ø–æ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤—å –µ–≥–æ –º–Ω–µ –æ–±—Ä–∞—Ç–Ω–æ. –≠—Ç–æ –ø—Ä–æ—Å—Ç–æ! üòä\n\n"
        "1. –ù–∞–∂–º–∏ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤—ã–±–µ—Ä–∏ \"–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å\".\n"
        "2. –í—Å—Ç–∞–≤—å –µ–≥–æ –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞ (–¥–æ–ª–≥–æ–µ –Ω–∞–∂–∞—Ç–∏–µ ‚Üí \"–í—Å—Ç–∞–≤–∏—Ç—å\").\n"
        "3. –ó–∞–ø–æ–ª–Ω–∏ —Å–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –ø—É–Ω–∫—Ç–∞.\n"
        "4. –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!\n\n"
        "–í–æ—Ç –∞–Ω–∫–µ—Ç–∞:\n\n"
        "<i>–ú–æ–π –≤–æ–∑—Ä–∞—Å—Ç: (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25)</i>\n"
        "<i>–°—Ç—Ä–∞–Ω–∞, –≥–¥–µ —è –∂–∏–≤—É: (–Ω–∞–ø—Ä–∏–º–µ—Ä, –†–æ—Å—Å–∏—è)</i>\n"
        "<i>–°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ: (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ –∂–µ–Ω–∞—Ç/–∑–∞–º—É–∂–µ–º)</i>\n"
        "<i>–ú–æ–∏ 3-5 –≥–ª–∞–≤–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤: (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è, –∫–Ω–∏–≥–∏, —Å–ø–æ—Ä—Ç)</i>\n"
        "<i>–ö–∞–∫ —è –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—é –Ω–∞ –∂–∏–∑–Ω—å: (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ä–∞–±–æ—Ç–∞—é –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–º)</i>\n"
        "<i>–ö–∞–∫ —è –∑–∞–±–æ—á—É—Å—å –æ —Å–≤–æ—ë–º –∑–¥–æ—Ä–æ–≤—å–µ: (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ö–æ–∂—É –≤ —Å–ø–æ—Ä—Ç–∑–∞–ª 2 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é)</i>\n"
        "<i>–ú–æ—è —Ä—É—Ç–∏–Ω–∞ –≤ –∂–∏–∑–Ω–∏: (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤—Å—Ç–∞—é –≤ 7 —É—Ç—Ä–∞, —Ä–∞–±–æ—Ç–∞—é –¥–æ 18:00, –≤–µ—á–µ—Ä–æ–º —á–∏—Ç–∞—é)</i>\n"
        "<i>–ú–æ—è —Å–∞–º–∞—è –±–æ–ª—å—à–∞—è –º–µ—á—Ç–∞: (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ–±—ä–µ–∑–¥–∏—Ç—å –≤–µ—Å—å –º–∏—Ä)</i>\n\n"
        "<b>–ù–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–∏—Ö –¥–∞–Ω–Ω—ã—Ö —è —Å–æ–∑–¥–∞–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–æ–µ–π –∂–∏–∑–Ω–∏ —á–µ—Ä–µ–∑ 5 –ª–µ—Ç!</b>"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–Ω–∫–µ—Ç—ã
@dp.message(lambda message: not message.text.startswith('/'))
async def handle_filled_form(message: types.Message):
    chat_id = message.chat.id
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∞–Ω–∫–µ—Ç—ã
    if "–ú–æ–π –≤–æ–∑—Ä–∞—Å—Ç" in message.text and "–°—Ç—Ä–∞–Ω–∞, –≥–¥–µ —è –∂–∏–≤—É" in message.text:
        logging.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∞–Ω–∫–µ—Ç–∞ –æ—Ç chat_id {chat_id}")
        user_prompts[chat_id] = message.text
        await message.answer("üß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–≤–æ—é –∂–∏–∑–Ω—å... –≠—Ç–æ –∑–∞–π–º—ë—Ç –≤—Å–µ–≥–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥! ‚è≥")
        try:
            result = await generate_prediction(message.text)
            user_predictions[chat_id] = result
            await message.answer(
                "<b>üîÆ –¢–≤–æ–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –ª–µ—Ç –≤–ø–µ—Ä—ë–¥:</b>\n\n"
                "–í–æ—Ç —á—Ç–æ –∂–¥—ë—Ç —Ç–µ–±—è, –µ—Å–ª–∏ —Ç—ã –ø—Ä–æ–¥–æ–ª–∂–∏—à—å –∏–¥—Ç–∏ —Ç–µ–∫—É—â–∏–º –ø—É—Ç—ë–º:\n\n"
                f"{result}"
            )
            logging.info(f"–ü—Ä–æ–≥–Ω–æ–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è chat_id {chat_id}")

            # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏
            markup = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–†–∞—Å–∫—Ä—ã—Ç—å 3 —Å–æ–±—ã—Ç–∏—è –∑–∞ 1 –∑–≤–µ–∑–¥—É ‚ú®", callback_data="learn_scenarios")],
                [InlineKeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –ø—Ä–æ–≥–Ω–æ–∑–æ–º üì§", callback_data="share_prediction")],
                [InlineKeyboardButton(text="–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞ üîÑ", callback_data="try_again")]
            ])
            await message.answer(
                "üí° –ê —á—Ç–æ, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –º–µ–Ω—è—Ç—å? –£–∑–Ω–∞–π, –∫–∞–∫–∏–µ 3 –∫–ª—é—á–µ–≤—ã—Ö —Å–æ–±—ã—Ç–∏—è –∂–¥—É—Ç —Ç–µ–±—è —á–µ—Ä–µ–∑ 5 –ª–µ—Ç, –µ—Å–ª–∏ —Ç—ã –ø—Ä–æ–¥–æ–ª–∂–∏—à—å –∏–¥—Ç–∏ —Ç–µ–º –∂–µ –ø—É—Ç—ë–º! –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ... üò≤",
                reply_markup=markup
            )
        except Exception as e:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è chat_id {chat_id}: {e}")
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π –ø–æ–∫—É–ø–∫–∏
    elif message.text == "—Å–µ–∫—Ä–µ—Ç–Ω–∞—è–ø–æ–∫—É–ø–∫–∞123":  # –°–µ–∫—Ä–µ—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç
        chat_id = message.chat.id
        logging.info(f"–°–µ–∫—Ä–µ—Ç–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ –¥–ª—è chat_id {chat_id}")
        user_input = user_prompts.get(chat_id)
        previous_result = user_predictions.get(chat_id)
        if not user_input:
            await message.answer(
                "–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏ –∞–Ω–∫–µ—Ç—É! üòä\n"
                "–û—Ç–ø—Ä–∞–≤—å /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É."
            )
            logging.warning(f"–ê–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è chat_id: {chat_id}")
            return
        await message.answer("üí´ –ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞! –ì–µ–Ω–µ—Ä–∏—Ä—É—é...")
        try:
            future = await generate_prediction(user_input, future_mode=True, previous_response=previous_result)
            await message.answer(future)
            await message.answer("–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π —Å—Ü–µ–Ω–∞—Ä–∏–π, –∑–∞–ø–æ–ª–Ω–∏ –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ —Å –ø–æ–º–æ—â—å—é /start! üòä")
            logging.info(f"3 —Å–æ–±—ã—Ç–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –¥–ª—è chat_id {chat_id}")
        except Exception as e:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è chat_id {chat_id}: {e}")
    else:
        await message.answer(
            "–ö–∞–∂–µ—Ç—Å—è, —Ç—ã –æ—Ç–ø—Ä–∞–≤–∏–ª —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ. üòÖ –ß—Ç–æ–±—ã —è –º–æ–≥ —Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏ –∞–Ω–∫–µ—Ç—É. –°–∫–æ–ø–∏—Ä—É–π –µ—ë, –∑–∞–ø–æ–ª–Ω–∏ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –∏ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –æ–±—Ä–∞—Ç–Ω–æ. –ù–∞–∂–º–∏ /start, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–∫–µ—Ç—É —Å–Ω–æ–≤–∞!"
        )
        logging.warning(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç chat_id {chat_id} –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –∫–∞–∫ –∞–Ω–∫–µ—Ç–∞")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–†–∞—Å–∫—Ä—ã—Ç—å 3 —Å–æ–±—ã—Ç–∏—è"
@dp.callback_query(lambda c: c.data == "learn_scenarios")
async def process_learn_scenarios(callback_query: types.CallbackQuery):
    callback_id = callback_query.id
    chat_id = callback_query.from_user.id
    message_id = callback_query.message.message_id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —ç—Ç–æ—Ç callback —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
    if callback_id in processed_callbacks:
        logging.info(f"–ü–æ–≤—Ç–æ—Ä–Ω—ã–π callback {callback_id} –æ—Ç chat_id {chat_id}, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º")
        await callback_query.answer("–°—á—ë—Ç —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏! üòä")
        return

    # –î–æ–±–∞–≤–ª—è–µ–º callback –≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
    processed_callbacks.add(callback_id)
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É '–†–∞—Å–∫—Ä—ã—Ç—å 3 —Å–æ–±—ã—Ç–∏—è' (callback_id: {callback_id})")

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –Ω–∞–∂–∞—Ç–∏–π
    try:
        await bot.delete_message(chat_id=chat_id, message_id=message_id)
        logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ (message_id: {message_id}) —É–¥–∞–ª–µ–Ω–æ –¥–ª—è chat_id {chat_id}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è chat_id {chat_id}: {e}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π
    await callback_query.message.answer(
        "–¢—ã –Ω–∞ —à–∞–≥–µ –æ—Ç —Ç–æ–≥–æ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å 3 –∫–ª—é—á–µ–≤—ã—Ö —Å–æ–±—ã—Ç–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –∂–¥—É—Ç —Ç–µ–±—è —á–µ—Ä–µ–∑ 5 –ª–µ—Ç, –µ—Å–ª–∏ —Ç—ã –Ω–µ –∏–∑–º–µ–Ω–∏—à—å —Å–≤–æ–π –ø—É—Ç—å! üí° –≠—Ç–æ –º–æ–∂–µ—Ç —Å—Ç–∞—Ç—å –≤–∞–∂–Ω—ã–º –æ—Ç–∫—Ä—ã—Ç–∏–µ–º –¥–ª—è —Ç–≤–æ–µ–≥–æ –±—É–¥—É—â–µ–≥–æ. –í—Å–µ–≥–æ –∑–∞ 1 –∑–≤–µ–∑–¥—É ‚≠ê (–≤–∞–ª—é—Ç–∞ Telegram, –∫–æ—Ç–æ—Ä—É—é —Ç—ã –º–æ–∂–µ—à—å –∫—É–ø–∏—Ç—å –ø—Ä—è–º–æ –∑–¥–µ—Å—å) —è —Ä–∞—Å–∫—Ä–æ—é —Ç–µ–±–µ —ç—Ç–∏ —Å–æ–±—ã—Ç–∏—è. –ì–æ—Ç–æ–≤?\n\n"
        "‚ö†Ô∏è –ï—Å–ª–∏ –∑–≤—ë–∑–¥—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –≤ —Ç–≤–æ—ë–º —Ä–µ–≥–∏–æ–Ω–µ, –Ω–∞–ø–∏—à–∏ /test_payment –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π –æ–ø–ª–∞—Ç—ã."
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—á—ë—Ç (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–¥—Ö–æ–¥ –∏–∑ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏, –Ω–æ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫)
    try:
        await bot.send_invoice(
            chat_id=chat_id,
            title="3 —Å–æ–±—ã—Ç–∏—è –≤ –±—É–¥—É—â–µ–º",
            description="–£–∑–Ω–∞–π, —á—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç, –µ—Å–ª–∏ –Ω–µ –∏–∑–º–µ–Ω–∏—à—å —Å—Ü–µ–Ω–∞—Ä–∏–π.",
            payload="buy_3_events",
            provider_token="",  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º provider_token –∫–∞–∫ –≤ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏
            currency="XTR",
            prices=[types.LabeledPrice(label="–ü—Ä–æ–≥–Ω–æ–∑", amount=1)],
        )
        logging.info(f"–°—á—ë—Ç –Ω–∞ 1 –∑–≤–µ–∑–¥—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è chat_id {chat_id}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—á—ë—Ç–∞ –¥–ª—è chat_id {chat_id}: {str(e)} (—Ç–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__})")
        await callback_query.message.answer(
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—á—ë—Ç. üòî –í–æ–∑–º–æ–∂–Ω–æ, Telegram Stars –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –≤ —Ç–≤–æ—ë–º —Ä–µ–≥–∏–æ–Ω–µ. –ü–æ–ø—Ä–æ–±—É–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –æ–ø–ª–∞—Ç—É, –Ω–∞–ø–∏—Å–∞–≤ /test_payment, –∏–ª–∏ —Å–≤—è–∂–∏—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Telegram."
        )

    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –ø—Ä–æ–≥–Ω–æ–∑–æ–º"
@dp.callback_query(lambda c: c.data == "share_prediction")
async def share_prediction(callback_query: types.CallbackQuery):
    chat_id = callback_query.from_user.id
    message_id = callback_query.message.message_id

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    try:
        await bot.delete_message(chat_id=chat_id, message_id=message_id)
        logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ (message_id: {message_id}) —É–¥–∞–ª–µ–Ω–æ –¥–ª—è chat_id {chat_id}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è chat_id {chat_id}: {e}")

    prediction = user_predictions.get(chat_id)
    if not prediction:
        await callback_query.message.answer("–ü—Ä–æ–≥–Ω–æ–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ —Å –ø–æ–º–æ—â—å—é /start!")
        logging.warning(f"–ü—Ä–æ–≥–Ω–æ–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è chat_id {chat_id}")
        return
    share_text = f"üîÆ –ú–æ–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –ª–µ—Ç –≤–ø–µ—Ä—ë–¥ –æ—Ç @LifeIn5Bot:\n\n{prediction}\n\n–£–∑–Ω–∞–π, —á—Ç–æ –∂–¥—ë—Ç —Ç–µ–±—è: t.me/LifeIn5Bot"
    await callback_query.message.answer(
        "–í–æ—Ç —Ç–≤–æ–π –ø—Ä–æ–≥–Ω–æ–∑! –ü–æ–¥–µ–ª–∏—Å—å –∏–º —Å –¥—Ä—É–∑—å—è–º–∏:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è", url=f"https://t.me/share/url?url={share_text}")]
        ])
    )
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞"
@dp.callback_query(lambda c: c.data == "try_again")
async def try_again(callback_query: types.CallbackQuery):
    chat_id = callback_query.from_user.id
    message_id = callback_query.message.message_id

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    try:
        await bot.delete_message(chat_id=chat_id, message_id=message_id)
        logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ (message_id: {message_id}) —É–¥–∞–ª–µ–Ω–æ –¥–ª—è chat_id {chat_id}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è chat_id {chat_id}: {e}")

    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    user_prompts.pop(chat_id, None)
    user_predictions.pop(chat_id, None)
    await callback_query.message.answer(
        "–î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞! –ó–∞–ø–æ–ª–Ω–∏ –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑. üòä"
    )
    await callback_query.message.answer(
        "üìù <b>–î–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è –ø–æ–±–ª–∏–∂–µ!</b>\n\n"
        "–ß—Ç–æ–±—ã —è –º–æ–≥ —Å–¥–µ–ª–∞—Ç—å —Ç–æ—á–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ —Ç–≤–æ–µ–π –∂–∏–∑–Ω–∏ —á–µ—Ä–µ–∑ 5 –ª–µ—Ç, –º–Ω–µ –Ω—É–∂–Ω–æ —É–∑–Ω–∞—Ç—å –æ —Ç–µ–±–µ –Ω–µ–º–Ω–æ–≥–æ –±–æ–ª—å—à–µ. –°–∫–æ–ø–∏—Ä—É–π —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–∞–ø–æ–ª–Ω–∏ –ø–æ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤—å –µ–≥–æ –º–Ω–µ –æ–±—Ä–∞—Ç–Ω–æ. –≠—Ç–æ –ø—Ä–æ—Å—Ç–æ! üòä\n\n"
        "1. –ù–∞–∂–º–∏ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤—ã–±–µ—Ä–∏ \"–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å\".\n"
        "2. –í—Å—Ç–∞–≤—å –µ–≥–æ –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞ (–¥–æ–ª–≥–æ–µ –Ω–∞–∂–∞—Ç–∏–µ ‚Üí \"–í—Å—Ç–∞–≤–∏—Ç—å\").\n"
        "3. –ó–∞–ø–æ–ª–Ω–∏ —Å–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –ø—É–Ω–∫—Ç–∞.\n"
        "4. –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!\n\n"
        "–í–æ—Ç –∞–Ω–∫–µ—Ç–∞:\n\n"
        "<i>–ú–æ–π –≤–æ–∑—Ä–∞—Å—Ç: (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25)</i>\n"
        "<i>–°—Ç—Ä–∞–Ω–∞, –≥–¥–µ —è –∂–∏–≤—É: (–Ω–∞–ø—Ä–∏–º–µ—Ä, –†–æ—Å—Å–∏—è)</i>\n"
        "<i>–°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ: (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ –∂–µ–Ω–∞—Ç/–∑–∞–º—É–∂–µ–º)</i>\n"
        "<i>–ú–æ–∏ 3-5 –≥–ª–∞–≤–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤: (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è, –∫–Ω–∏–≥–∏, —Å–ø–æ—Ä—Ç)</i>\n"
        "<i>–ö–∞–∫ —è –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—é –Ω–∞ –∂–∏–∑–Ω—å: (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ä–∞–±–æ—Ç–∞—é –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–º)</i>\n"
        "<i>–ö–∞–∫ —è –∑–∞–±–æ—á—É—Å—å –æ —Å–≤–æ—ë–º –∑–¥–æ—Ä–æ–≤—å–µ: (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ö–æ–∂—É –≤ —Å–ø–æ—Ä—Ç–∑–∞–ª 2 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é)</i>\n"
        "<i>–ú–æ—è —Ä—É—Ç–∏–Ω–∞ –≤ –∂–∏–∑–Ω–∏: (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤—Å—Ç–∞—é –≤ 7 —É—Ç—Ä–∞, —Ä–∞–±–æ—Ç–∞—é –¥–æ 18:00, –≤–µ—á–µ—Ä–æ–º —á–∏—Ç–∞—é)</i>\n"
        "<i>–ú–æ—è —Å–∞–º–∞—è –±–æ–ª—å—à–∞—è –º–µ—á—Ç–∞: (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ–±—ä–µ–∑–¥–∏—Ç—å –≤–µ—Å—å –º–∏—Ä)</i>\n\n"
        "<b>–ù–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–∏—Ö –¥–∞–Ω–Ω—ã—Ö —è —Å–æ–∑–¥–∞–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–æ–µ–π –∂–∏–∑–Ω–∏ —á–µ—Ä–µ–∑ 5 –ª–µ—Ç!</b>"
    )
    await callback_query.answer()

# –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã
@dp.message(Command(commands=["test_payment"]))
async def test_payment(message: types.Message):
    chat_id = message.chat.id
    logging.info(f"–¢–µ—Å—Ç–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞ –¥–ª—è chat_id {chat_id}")
    user_input = user_prompts.get(chat_id)
    previous_result = user_predictions.get(chat_id)
    if not user_input:
        await message.answer(
            "–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏ –∞–Ω–∫–µ—Ç—É! üòä\n"
            "–û—Ç–ø—Ä–∞–≤—å /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É."
        )
        logging.warning(f"–ê–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è chat_id: {chat_id}")
        return
    await message.answer("üí´ –ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞! –ì–µ–Ω–µ—Ä–∏—Ä—É—é...")
    try:
        future = await generate_prediction(user_input, future_mode=True, previous_response=previous_result)
        await message.answer(
            "<b>–í–æ—Ç —á—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–æ–∏–∑–æ–π—Ç–∏, –µ—Å–ª–∏ —Ç—ã –Ω–µ –∏–∑–º–µ–Ω–∏—à—å —Å–≤–æ–π –ø—É—Ç—å:</b>\n\n"
            f"{future}"
        )
        await message.answer("–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π —Å—Ü–µ–Ω–∞—Ä–∏–π, –∑–∞–ø–æ–ª–Ω–∏ –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ —Å –ø–æ–º–æ—â—å—é /start! üòä")
        logging.info(f"3 —Å–æ–±—ã—Ç–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –¥–ª—è chat_id {chat_id}")
    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è chat_id {chat_id}: {e}")

@dp.pre_checkout_query()
async def process_pre_checkout_query(pre_checkout_query: types.PreCheckoutQuery):
    logging.info(f"–ü–æ–ª—É—á–µ–Ω pre_checkout_query: {pre_checkout_query.id}")
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)

@dp.message(lambda message: message.successful_payment)
async def process_successful_payment(message: types.Message):
    chat_id = message.chat.id
    payload = message.successful_payment.invoice_payload
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞: {payload}")
    
    if payload == "buy_3_events":
        user_input = user_prompts.get(chat_id)
        previous_result = user_predictions.get(chat_id)
        if not user_input:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏ –∞–Ω–∫–µ—Ç—É! –ù–∞–∂–º–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
            logging.warning(f"–ê–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è chat_id: {chat_id}")
            return
        await message.answer("üí´ –ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞! –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ç–≤–æ–∏ 3 –∫–ª—é—á–µ–≤—ã—Ö —Å–æ–±—ã—Ç–∏—è... ‚è≥")
        try:
            future = await generate_prediction(user_input, future_mode=True, previous_response=previous_result)
            await message.answer(
                "<b>–í–æ—Ç —á—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–æ–∏–∑–æ–π—Ç–∏, –µ—Å–ª–∏ —Ç—ã –Ω–µ –∏–∑–º–µ–Ω–∏—à—å —Å–≤–æ–π –ø—É—Ç—å:</b>\n\n"
                f"{future}"
            )
            await message.answer("–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π —Å—Ü–µ–Ω–∞—Ä–∏–π, –∑–∞–ø–æ–ª–Ω–∏ –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ —Å –ø–æ–º–æ—â—å—é /start! üòä")
            logging.info(f"3 —Å–æ–±—ã—Ç–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –¥–ª—è chat_id {chat_id}")
        except Exception as e:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è chat_id {chat_id}: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def debug_unhandled(message: types.Message):
    logging.info(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text} –æ—Ç chat_id {message.chat.id}")

async def main():
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
