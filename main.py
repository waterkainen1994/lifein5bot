import logging
import asyncio
import time
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.client.default import DefaultBotProperties
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from dotenv import load_dotenv
import os
from gpt import generate_prediction
from analytics import update_analytics_data  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏
user_prompts = {}  # –•—Ä–∞–Ω–∏—Ç –∞–Ω–∫–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_predictions = {}  # –•—Ä–∞–Ω–∏—Ç –ø—Ä–æ–≥–Ω–æ–∑—ã
processed_callbacks = set()  # –•—Ä–∞–Ω–∏—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ callback_query_id
user_analytics = {}  # –•—Ä–∞–Ω–∏—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫—É: {chat_id: {"start_count": int, "forecast_count": int, "payment_count": int, "start_time": float}}
user_start_times = {}  # –•—Ä–∞–Ω–∏—Ç –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å–µ—Å—Å–∏–∏: {chat_id: start_time}

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
TELEGRAM_MESSAGE_LIMIT = 4096

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–±–∏–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —á–∞—Å—Ç–∏
def split_text(text, limit=TELEGRAM_MESSAGE_LIMIT):
    parts = []
    while len(text) > limit:
        split_pos = text[:limit].rfind('\n')
        if split_pos == -1:
            split_pos = text[:limit].rfind(' ')
            if split_pos == -1:
                split_pos = limit
        parts.append(text[:split_pos])
        text = text[split_pos:].lstrip()
    if text:
        parts.append(text)
    return parts

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
async def log_analytics(chat_id, username, start_count=0, forecast_count=0, payment_count=0):
    if chat_id not in user_analytics:
        user_analytics[chat_id] = {
            "start_count": 0,
            "forecast_count": 0,
            "payment_count": 0,
            "start_time": user_start_times.get(chat_id, time.time())
        }
    
    user_analytics[chat_id]["start_count"] += start_count
    user_analytics[chat_id]["forecast_count"] += forecast_count
    user_analytics[chat_id]["payment_count"] += payment_count
    
    # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–≤ –º–∏–Ω—É—Ç–∞—Ö)
    start_time = user_analytics[chat_id]["start_time"]
    usage_time = (time.time() - start_time) / 60  # –í—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ CSV
    update_analytics_data(
        username=username,
        user_id=chat_id,
        start_count=user_analytics[chat_id]["start_count"],
        forecast_count=user_analytics[chat_id]["forecast_count"],
        payment_count=user_analytics[chat_id]["payment_count"],
        usage_time=usage_time
    )

@dp.message(CommandStart())
async def start(message: types.Message):
    chat_id = message.chat.id
    username = message.from_user.username or message.from_user.first_name
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å–µ—Å—Å–∏–∏
    user_start_times[chat_id] = time.time()
    
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π /start
    await log_analytics(chat_id, username, start_count=1)
    
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    await message.answer(
        "üåü <b>–£–ó–ù–ê–ô, –ß–¢–û –ñ–î–Å–¢ –¢–ï–ë–Ø –ß–ï–†–ï–ó 5 –õ–ï–¢!</b> üåü\n\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –∑–∞–≥–ª—è–Ω—É—Ç—å –≤ –±—É–¥—É—â–µ–µ —Å –ø–æ–º–æ—â—å—é –ò–ò! –û—Ç–≤–µ—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ —Å–µ–±–µ, –∏ —è —Å–æ–∑–¥–∞–º –ø–æ–¥—Ä–æ–±–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ —Ç–≤–æ–µ–π –∂–∏–∑–Ω–∏ –Ω–∞ 5 –ª–µ—Ç –≤–ø–µ—Ä—ë–¥. –ê –ø–æ—Å–ª–µ —Ç—ã —Å–º–æ–∂–µ—à—å —É–∑–Ω–∞—Ç—å, —á—Ç–æ –±—É–¥–µ—Ç, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –∏–∑–º–µ–Ω–∏—Ç—å, –≤—Å–µ–≥–æ –∑–∞ 1 –∑–≤–µ–∑–¥—É ‚≠ê! –≠—Ç–æ –∑–∞–π–º—ë—Ç –≤—Å–µ–≥–æ –ø–∞—Ä—É –º–∏–Ω—É—Ç! üòä\n\n"
        "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –ø—Ä–æ—Å—Ç–æ –∑–∞–ø–æ–ª–Ω–∏ –∞–Ω–∫–µ—Ç—É –Ω–∏–∂–µ üëá"
    )
    await message.answer(
        "üìù <b>–î–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è –ø–æ–±–ª–∏–∂–µ!</b>\n\n"
        "–ß—Ç–æ–±—ã —è –º–æ–≥ —Å–¥–µ–ª–∞—Ç—å —Ç–æ—á–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ —Ç–≤–æ–µ–π –∂–∏–∑–Ω–∏ —á–µ—Ä–µ–∑ 5 –ª–µ—Ç, –º–Ω–µ –Ω—É–∂–Ω–æ —É–∑–Ω–∞—Ç—å –æ —Ç–µ–±–µ –Ω–µ–º–Ω–æ–≥–æ –±–æ–ª—å—à–µ. –°–∫–æ–ø–∏—Ä—É–π —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–∞–ø–æ–ª–Ω–∏ –ø–æ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤—å –µ–≥–æ –º–Ω–µ –æ–±—Ä–∞—Ç–Ω–æ. –≠—Ç–æ –ø—Ä–æ—Å—Ç–æ! üòä\n\n"
        "1. –ù–∞–∂–º–∏ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤—ã–±–µ—Ä–∏ \"–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å\".\n"
        "2. –í—Å—Ç–∞–≤—å –µ–≥–æ –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞ (–¥–æ–ª–≥–æ–µ –Ω–∞–∂–∞—Ç–∏–µ ‚Üí \"–í—Å—Ç–∞–≤–∏—Ç—å\").\n"
        "3. –ó–∞–ø–æ–ª–Ω–∏ —Å–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –ø—É–Ω–∫—Ç–∞.\n"
        "4. –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!\n\n"
        "–í–æ—Ç –∞–Ω–∫–µ—Ç–∞:\n\n"
        "<i>–ú–æ–π –≤–æ–∑—Ä–∞—Å—Ç: (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25)</i>\n"
        "<i>–°—Ç—Ä–∞–Ω–∞, –≥–¥–µ —è –∂–∏–≤—É: (–Ω–∞–ø—Ä–∏–º–µ—Ä, –†–æ—Å—Å–∏—è)</i>\n"
        "<i>–°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ: (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ –∂–µ–Ω–∞—Ç/–∑–∞–º—É–∂–µ–º)</i>\n"
        "<i>–ú–æ–∏ 3-5 –≥–ª–∞–≤–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤: (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è, –∫–Ω–∏–≥–∏, —Å–ø–æ—Ä—Ç)</i>\n"
        "<i>–ö–∞–∫ —è –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—é –Ω–∞ –∂–∏–∑–Ω—å: (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ä–∞–±–æ—Ç–∞—é –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–º)</i>\n"
        "<i>–ö–∞–∫ —è –∑–∞–±–æ—á—É—Å—å –æ —Å–≤–æ—ë–º –∑–¥–æ—Ä–æ–≤—å–µ: (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ö–æ–∂—É –≤ —Å–ø–æ—Ä—Ç–∑–∞–ª 2 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é)</i>\n"
        "<i>–ú–æ—è —Ä—É—Ç–∏–Ω–∞ –≤ –∂–∏–∑–Ω–∏: (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤—Å—Ç–∞—é –≤ 7 —É—Ç—Ä–∞, —Ä–∞–±–æ—Ç–∞—é –¥–æ 18:00, –≤–µ—á–µ—Ä–æ–º —á–∏—Ç–∞—é)</i>\n"
        "<i>–ú–æ—è —Å–∞–º–∞—è –±–æ–ª—å—à–∞—è –º–µ—á—Ç–∞: (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ–±—ä–µ–∑–¥–∏—Ç—å –≤–µ—Å—å –º–∏—Ä)</i>\n\n"
        "<b>–ù–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–∏—Ö –¥–∞–Ω–Ω—ã—Ö —è —Å–æ–∑–¥–∞–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–æ–µ–π –∂–∏–∑–Ω–∏ —á–µ—Ä–µ–∑ 5 –ª–µ—Ç!</b>"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–Ω–∫–µ—Ç—ã
@dp.message(lambda message: not message.text.startswith('/'))
async def handle_filled_form(message: types.Message):
    chat_id = message.chat.id
    username = message.from_user.username or message.from_user.first_name
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∞–Ω–∫–µ—Ç—ã
    if "–ú–æ–π –≤–æ–∑—Ä–∞—Å—Ç" in message.text and "–°—Ç—Ä–∞–Ω–∞, –≥–¥–µ —è –∂–∏–≤—É" in message.text:
        logging.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∞–Ω–∫–µ—Ç–∞ –æ—Ç chat_id {chat_id}")
        user_prompts[chat_id] = message.text
        await message.answer("üß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–≤–æ—é –∂–∏–∑–Ω—å... –≠—Ç–æ –∑–∞–π–º—ë—Ç –≤—Å–µ–≥–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥! ‚è≥")
        try:
            result = await generate_prediction(message.text)
            user_predictions[chat_id] = result

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            full_message = (
                "<b>üîÆ –¢–≤–æ–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –ª–µ—Ç –≤–ø–µ—Ä—ë–¥:</b>\n\n"
                "–í–æ—Ç —á—Ç–æ –∂–¥—ë—Ç —Ç–µ–±—è, –µ—Å–ª–∏ —Ç—ã –ø—Ä–æ–¥–æ–ª–∂–∏—à—å –∏–¥—Ç–∏ —Ç–µ–∫—É—â–∏–º –ø—É—Ç—ë–º:\n\n"
                f"{result}"
            )

            # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
            message_parts = split_text(full_message, TELEGRAM_MESSAGE_LIMIT)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å
            for part in message_parts:
                await message.answer(part)
                await asyncio.sleep(0.5)

            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
            await log_analytics(chat_id, username, forecast_count=1)
            
            logging.info(f"–ü—Ä–æ–≥–Ω–æ–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è chat_id {chat_id}")

            # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏
            markup = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–†–∞—Å–∫—Ä—ã—Ç—å 3 —Å–æ–±—ã—Ç–∏—è –∑–∞ 1 –∑–≤–µ–∑–¥—É ‚ú®", callback_data="learn_scenarios")],
                [InlineKeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –ø—Ä–æ–≥–Ω–æ–∑–æ–º üì§", callback_data="share_prediction")],
                [InlineKeyboardButton(text="–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞ üîÑ", callback_data="try_again")]
            ])
            await message.answer(
                "üí° –ê —á—Ç–æ, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –º–µ–Ω—è—Ç—å? –£–∑–Ω–∞–π, –∫–∞–∫–∏–µ 3 –∫–ª—é—á–µ–≤—ã—Ö —Å–æ–±—ã—Ç–∏—è –∂–¥—É—Ç —Ç–µ–±—è —á–µ—Ä–µ–∑ 5 –ª–µ—Ç, –µ—Å–ª–∏ —Ç—ã –ø—Ä–æ–¥–æ–ª–∂–∏—à—å –∏–¥—Ç–∏ —Ç–µ–º –∂–µ –ø—É—Ç—ë–º! –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ... üò≤",
                reply_markup=markup
            )
        except Exception as e:
            await message.answer(
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑. üòî –í–æ–∑–º–æ–∂–Ω–æ, —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. "
                "–ü–æ–ø—Ä–æ–±—É–π —Å–æ–∫—Ä–∞—Ç–∏—Ç—å —Å–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –≤ –∞–Ω–∫–µ—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—ë —Å–Ω–æ–≤–∞. –ù–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ!"
            )
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è chat_id {chat_id}: {e}")
    # –û—Å—Ç–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    elif message.text == "—Å–µ–∫—Ä–µ—Ç–Ω–∞—è–ø–æ–∫—É–ø–∫–∞123":
        chat_id = message.chat.id
        logging.info(f"–°–µ–∫—Ä–µ—Ç–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ –¥–ª—è chat_id {chat_id}")
        user_input = user_prompts.get(chat_id)
        previous_result = user_predictions.get(chat_id)
        if not user_input:
            await message.answer(
                "–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏ –∞–Ω–∫–µ—Ç—É! üòä\n"
                "–û—Ç–ø—Ä–∞–≤—å /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É."
            )
            logging.warning(f"–ê–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è chat_id: {chat_id}")
            return
        await message.answer("üí´ –ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞! –ì–µ–Ω–µ—Ä–∏—Ä—É—é...")
        try:
            future = await generate_prediction(user_input, future_mode=True, previous_response=previous_result)
            message_parts = split_text(future, TELEGRAM_MESSAGE_LIMIT)
            for part in message_parts:
                await message.answer(part)
                await asyncio.sleep(0.5)
            await message.answer("–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π —Å—Ü–µ–Ω–∞—Ä–∏–π, –∑–∞–ø–æ–ª–Ω–∏ –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ —Å –ø–æ–º–æ—â—å—é /start! üòä")
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –æ–ø–ª–∞—Ç –∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
            await log_analytics(chat_id, username, forecast_count=1, payment_count=1)
            
            logging.info(f"3 —Å–æ–±—ã—Ç–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –¥–ª—è chat_id {chat_id}")
        except Exception as e:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è chat_id {chat_id}: {e}")
    else:
        await message.answer(
            "–ö–∞–∂–µ—Ç—Å—è, —Ç—ã –æ—Ç–ø—Ä–∞–≤–∏–ª —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ. üòÖ –ß—Ç–æ–±—ã —è –º–æ–≥ —Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏ –∞–Ω–∫–µ—Ç—É. –°–∫–æ–ø–∏—Ä—É–π –µ—ë, –∑–∞–ø–æ–ª–Ω–∏ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –∏ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –æ–±—Ä–∞—Ç–Ω–æ. –ù–∞–∂–º–∏ /start, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–∫–µ—Ç—É —Å–Ω–æ–≤–∞!"
        )
        logging.warning(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç chat_id {chat_id} –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –∫–∞–∫ –∞–Ω–∫–µ—Ç–∞")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–†–∞—Å–∫—Ä—ã—Ç—å 3 —Å–æ–±—ã—Ç–∏—è"
@dp.callback_query(lambda c: c.data == "learn_scenarios")
async def process_learn_scenarios(callback_query: types.CallbackQuery):
    callback_id = callback_query.id
    chat_id = callback_query.from_user.id
    username = callback_query.from_user.username or callback_query.from_user.first_name
    message_id = callback_query.message.message_id

    if callback_id in processed_callbacks:
        logging.info(f"–ü–æ–≤—Ç–æ—Ä–Ω—ã–π callback {callback_id} –æ—Ç chat_id {chat_id}, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º")
        await callback_query.answer("–°—á—ë—Ç —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏! üòä")
        return

    processed_callbacks.add(callback_id)
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É '–†–∞—Å–∫—Ä—ã—Ç—å 3 —Å–æ–±—ã—Ç–∏—è' (callback_id: {callback_id})")

    try:
        await bot.delete_message(chat_id=chat_id, message_id=message_id)
        logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ (message_id: {message_id}) —É–¥–∞–ª–µ–Ω–æ –¥–ª—è chat_id {chat_id}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è chat_id {chat_id}: {e}")

    await callback_query.message.answer(
        "–¢—ã –Ω–∞ —à–∞–≥–µ –æ—Ç —Ç–æ–≥–æ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å 3 –∫–ª—é—á–µ–≤—ã—Ö —Å–æ–±—ã—Ç–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –∂–¥—É—Ç —Ç–µ–±—è —á–µ—Ä–µ–∑ 5 –ª–µ—Ç, –µ—Å–ª–∏ —Ç—ã –Ω–µ –∏–∑–º–µ–Ω–∏—à—å —Å–≤–æ–π –ø—É—Ç—å! üí° –≠—Ç–æ –º–æ–∂–µ—Ç —Å—Ç–∞—Ç—å –≤–∞–∂–Ω—ã–º –æ—Ç–∫—Ä—ã—Ç–∏–µ–º –¥–ª—è —Ç–≤–æ–µ–≥–æ –±—É–¥—É—â–µ–≥–æ. –í—Å–µ–≥–æ –∑–∞ 1 –∑–≤–µ–∑–¥—É ‚≠ê (–≤–∞–ª—é—Ç–∞ Telegram, –∫–æ—Ç–æ—Ä—É—é —Ç—ã –º–æ–∂–µ—à—å –∫—É–ø–∏—Ç—å –ø—Ä—è–º–æ –∑–¥–µ—Å—å) —è —Ä–∞—Å–∫—Ä–æ—é —Ç–µ–±–µ —ç—Ç–∏ —Å–æ–±—ã—Ç–∏—è. –ì–æ—Ç–æ–≤?"
    )

    try:
        await bot.send_invoice(
            chat_id=chat_id,
            title="3 —Å–æ–±—ã—Ç–∏—è –≤ –±—É–¥—É—â–µ–º",
            description="–£–∑–Ω–∞–π, —á—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç, –µ—Å–ª–∏ –Ω–µ –∏–∑–º–µ–Ω–∏—à—å —Å—Ü–µ–Ω–∞—Ä–∏–π.",
            payload="buy_3_events",
            provider_token="",
            currency="XTR",
            prices=[types.LabeledPrice(label="–ü—Ä–æ–≥–Ω–æ–∑", amount=1)],  # –ò–∑–º–µ–Ω—è–µ–º —Ü–µ–Ω—É –Ω–∞ 1 –∑–≤–µ–∑–¥—É
        )
        logging.info(f"–°—á—ë—Ç –Ω–∞ 1 –∑–≤–µ–∑–¥—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è chat_id {chat_id}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—á—ë—Ç–∞ –¥–ª—è chat_id {chat_id}: {str(e)} (—Ç–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__})")
        await callback_query.message.answer(
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—á—ë—Ç. üòî –í–æ–∑–º–æ–∂–Ω–æ, Telegram Stars –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –≤ —Ç–≤–æ—ë–º —Ä–µ–≥–∏–æ–Ω–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Telegram."
        )

    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –ø—Ä–æ–≥–Ω–æ–∑–æ–º"
@dp.callback_query(lambda c: c.data == "share_prediction")
async def share_prediction(callback_query: types.CallbackQuery):
    chat_id = callback_query.from_user.id
    message_id = callback_query.message.message_id

    try:
        await bot.delete_message(chat_id=chat_id, message_id=message_id)
        logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ (message_id: {message_id}) —É–¥–∞–ª–µ–Ω–æ –¥–ª—è chat_id {chat_id}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è chat_id {chat_id}: {e}")

    prediction = user_predictions.get(chat_id)
    if not prediction:
        await callback_query.message.answer("–ü—Ä–æ–≥–Ω–æ–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ —Å –ø–æ–º–æ—â—å—é /start!")
        logging.warning(f"–ü—Ä–æ–≥–Ω–æ–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è chat_id {chat_id}")
        return
    share_text = f"üîÆ –ú–æ–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –ª–µ—Ç –≤–ø–µ—Ä—ë–¥ –æ—Ç @LifeIn5Bot:\n\n{prediction}\n\n–£–∑–Ω–∞–π, —á—Ç–æ –∂–¥—ë—Ç —Ç–µ–±—è: t.me/LifeIn5Bot"
    message_parts = split_text(share_text, TELEGRAM_MESSAGE_LIMIT)
    for part in message_parts:
        await callback_query.message.answer(
            part,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è", url=f"https://t.me/share/url?url={part}")]
            ])
        )
        await asyncio.sleep(0.5)
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞"
@dp.callback_query(lambda c: c.data == "try_again")
async def try_again(callback_query: types.CallbackQuery):
    chat_id = callback_query.from_user.id
    message_id = callback_query.message.message_id

    try:
        await bot.delete_message(chat_id=chat_id, message_id=message_id)
        logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ (message_id: {message_id}) —É–¥–∞–ª–µ–Ω–æ –¥–ª—è chat_id {chat_id}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è chat_id {chat_id}: {e}")

    user_prompts.pop(chat_id, None)
    user_predictions.pop(chat_id, None)
    await callback_query.message.answer(
        "–î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞! –ó–∞–ø–æ–ª–Ω–∏ –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑. üòä"
    )
    await callback_query.message.answer(
        "üìù <b>–î–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è –ø–æ–±–ª–∏–∂–µ!</b>\n\n"
        "–ß—Ç–æ–±—ã —è –º–æ–≥ —Å–¥–µ–ª–∞—Ç—å —Ç–æ—á–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ —Ç–≤–æ–µ–π –∂–∏–∑–Ω–∏ —á–µ—Ä–µ–∑ 5 –ª–µ—Ç, –º–Ω–µ –Ω—É–∂–Ω–æ —É–∑–Ω–∞—Ç—å –æ —Ç–µ–±–µ –Ω–µ–º–Ω–æ–≥–æ –±–æ–ª—å—à–µ. –°–∫–æ–ø–∏—Ä—É–π —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–∞–ø–æ–ª–Ω–∏ –ø–æ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤—å –µ–≥–æ –º–Ω–µ –æ–±—Ä–∞—Ç–Ω–æ. –≠—Ç–æ –ø—Ä–æ—Å—Ç–æ! üòä\n\n"
        "1. –ù–∞–∂–º–∏ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤—ã–±–µ—Ä–∏ \"–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å\".\n"
        "2. –í—Å—Ç–∞–≤—å –µ–≥–æ –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞ (–¥–æ–ª–≥–æ–µ –Ω–∞–∂–∞—Ç–∏–µ ‚Üí \"–í—Å—Ç–∞–≤–∏—Ç—å\").\n"
        "3. –ó–∞–ø–æ–ª–Ω–∏ —Å–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –ø—É–Ω–∫—Ç–∞.\n"
        "4. –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!\n\n"
        "–í–æ—Ç –∞–Ω–∫–µ—Ç–∞:\n\n"
        "<i>–ú–æ–π –≤–æ–∑—Ä–∞—Å—Ç: (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25)</i>\n"
        "<i>–°—Ç—Ä–∞–Ω–∞, –≥–¥–µ —è –∂–∏–≤—É: (–Ω–∞–ø—Ä–∏–º–µ—Ä, –†–æ—Å—Å–∏—è)</i>\n"
        "<i>–°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ: (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ –∂–µ–Ω–∞—Ç/–∑–∞–º—É–∂–µ–º)</i>\n"
        "<i>–ú–æ–∏ 3-5 –≥–ª–∞–≤–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤: (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è, –∫–Ω–∏–≥–∏, —Å–ø–æ—Ä—Ç)</i>\n"
        "<i>–ö–∞–∫ —è –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—é –Ω–∞ –∂–∏–∑–Ω—å: (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ä–∞–±–æ—Ç–∞—é –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–º)</i>\n"
        "<i>–ö–∞–∫ —è –∑–∞–±–æ—á—É—Å—å –æ —Å–≤–æ—ë–º –∑–¥–æ—Ä–æ–≤—å–µ: (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ö–æ–∂—É –≤ —Å–ø–æ—Ä—Ç–∑–∞–ª 2 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é)</i>\n"
        "<i>–ú–æ—è —Ä—É—Ç–∏–Ω–∞ –≤ –∂–∏–∑–Ω–∏: (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤—Å—Ç–∞—é –≤ 7 —É—Ç—Ä–∞, —Ä–∞–±–æ—Ç–∞—é –¥–æ 18:00, –≤–µ—á–µ—Ä–æ–º —á–∏—Ç–∞—é)</i>\n"
        "<i>–ú–æ—è —Å–∞–º–∞—è –±–æ–ª—å—à–∞—è –º–µ—á—Ç–∞: (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ–±—ä–µ–∑–¥–∏—Ç—å –≤–µ—Å—å –º–∏—Ä)</i>\n\n"
        "<b>–ù–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–∏—Ö –¥–∞–Ω–Ω—ã—Ö —è —Å–æ–∑–¥–∞–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–æ–µ–π –∂–∏–∑–Ω–∏ —á–µ—Ä–µ–∑ 5 –ª–µ—Ç!</b>"
    )
    await callback_query.answer()

@dp.pre_checkout_query()
async def process_pre_checkout_query(pre_checkout_query: types.PreCheckoutQuery):
    logging.info(f"–ü–æ–ª—É—á–µ–Ω pre_checkout_query: {pre_checkout_query.id}")
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)

@dp.message(lambda message: message.successful_payment)
async def process_successful_payment(message: types.Message):
    chat_id = message.chat.id
    username = message.from_user.username or message.from_user.first_name
    logging.info(f"–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –¥–ª—è chat_id {chat_id}")

    # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ message.successful_payment
    logging.info(f"–ü–æ–ª–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ successful_payment: {message.successful_payment}")

    payload = message.successful_payment.invoice_payload
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞ —Å payload: {payload}")

    if payload == "buy_3_events":
        logging.info(f"Payload —Å–æ–≤–ø–∞–¥–∞–µ—Ç, –Ω–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è chat_id {chat_id}")
        user_input = user_prompts.get(chat_id)
        previous_result = user_predictions.get(chat_id)
        logging.info(f"–ü–æ–ª—É—á–µ–Ω—ã user_input: {user_input is not None}, previous_result: {previous_result is not None}")

        if not user_input:
            logging.warning(f"–ê–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è chat_id: {chat_id}")
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏ –∞–Ω–∫–µ—Ç—É! –ù–∞–∂–º–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
            return

        await message.answer("üí´ –ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞! –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ç–≤–æ–∏ 3 –∫–ª—é—á–µ–≤—ã—Ö —Å–æ–±—ã—Ç–∏—è... ‚è≥")
        logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è chat_id {chat_id}")

        try:
            future = await generate_prediction(user_input, future_mode=True, previous_response=previous_result)
            logging.info(f"–ü—Ä–æ–≥–Ω–æ–∑ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è chat_id {chat_id}")

            message_parts = split_text(future, TELEGRAM_MESSAGE_LIMIT)
            for part in message_parts:
                await message.answer(part)
                await asyncio.sleep(0.5)
            await message.answer("–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π —Å—Ü–µ–Ω–∞—Ä–∏–π, –∑–∞–ø–æ–ª–Ω–∏ –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ —Å –ø–æ–º–æ—â—å—é /start! üòä")
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –æ–ø–ª–∞—Ç –∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
            await log_analytics(chat_id, username, forecast_count=1, payment_count=1)
            
            logging.info(f"3 —Å–æ–±—ã—Ç–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –¥–ª—è chat_id {chat_id}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è chat_id {chat_id}: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
    else:
        logging.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π payload: {payload} –¥–ª—è chat_id {chat_id}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ–ø–ª–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def debug_unhandled(message: types.Message):
    logging.info(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text} –æ—Ç chat_id {message.chat.id}")

async def main():
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
